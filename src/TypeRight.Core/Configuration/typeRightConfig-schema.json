{
	"$schema": "http://json-schema.org/draft-04/schema",
	"title": "JSON Schema for TypeRight configuration",

	"type": "object",

	"properties": {
		"enabled": {
			"type": "boolean",
			"description": "Set to true to enable automatic script generation on build"
		},
		"baseUrl": {
			"type": "string",
			"description": "The base URL for generating MVC actions for this project.  Generally used when this project is a sub-application of another project."
		},
		"serverObjectsResultFilepath": {
			"type": "string",
			"default": "./Scripts/ServerObjects.ts",
			"description": "The default relative output path for any class marked with 'ScriptObject'.  This can be overridden with the 'ScriptObjects' attribute."
		},
		"queryParams": {
			"type": [ "object", "string" ],
			"additionalProperties": { "type": "string" }
		},
		"nameCasingConverter": {
			"type": [ "string", "null" ],
			"enum": [ "none", "camel" ],
			"description": "Defines the casing strategy to use by default for properties and actions.  In all cases, a specified property (i.e. JsonPropertyNameAttribute) name will always take precidence."
		},
		"fetchConfig": {
			"type": "object",
			"description": "The configuration for your generalized fetch function",
			"$ref": "#/definitions/fetchConfiguration"
		},
		"actionConfigurations": {
			"type": "array",
			"description": "DEPRECATED: Array of action configurations.  Use these to configure how web APIs get called.",
			"items": {
				"$ref": "#/definitions/actionConfiguration"
			}
		}
	},


	"definitions": {
		"importDefinition": {
			"type": "object",
			"properties": {
				"useAlias": {
					"type": "boolean",
					"default": false,
					"description": "Set to true to use an alias for this import.  Which, like, doesn't matter."
				},
				"items": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "The items to import from the provided path"
				},
				"path": {
					"type": "string",
					"description": "The relative of the file to import from."
				}
			}
		},

		"actionConfiguration": {
			"type": "object",
			"properties": {
				"method": {
					"type": "string",
					"description": "The request method this configuration aplies to",
					"enum": [ "default", "POST", "GET", "PUT", "PATCH", "DELETE" ]
				},
				"fetchFunctionName": {
					"type": "string",
					"description": "The name of method that will perform this fetch"
				},
				"fetchFilePath": {
					"type": "string",
					"description": "The relative path from the project root of the file that contains the fetch function"
				},
				"returnType": {
					"type": "string",
					"description": "The return type for the fetch function.  Can use the token $returnType$ to use the return type of the action. Example: Promise<$returnType$>"
				},
				"imports": {
					"type": [ "array", "null" ],
					"items": {
						"$ref": "#/definitions/importDefinition"
					}
				},
				"parameters": {
					"type": [ "array", "null" ],
					"items": {
						"$ref": "#/definitions/actionParameter"
					}
				}
			}
		},

		"fetchConfiguration": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of method that will perform this fetch"
				},
				"filePath": {
					"type": "string",
					"description": "The relative path from the project root of the file that contains the fetch function"
				},
				"returnType": {
					"type": "string",
					"description": "The return type for the fetch function.  Can use the token $returnType$ to use the return type of the action. Example: Promise<$returnType$>"
				},
				"imports": {
					"type": [ "array", "null" ],
					"items": {
						"$ref": "#/definitions/importDefinition"
					}
				},
				"parameters": {
					"type": [ "array", "null" ],
					"items": {
						"anyOf": [
							{ "enum": [ "url", "body", "requestMethod" ] },
							{ "$ref": "#/definitions/actionParameter" }
						]
					}
				}
			}
		},

		"actionParameter": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "The name of the parameter"
				},
				"type": {
					"type": "string",
					"description": "The type of the parameter.  Can use tokens such as $returnType$"
				},
				"optional": {
					"type": "boolean",
					"description": "Set to true to make this an optional parameter."
				}
			}
		}
	}
}

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TypeRight.Configuration;

namespace TypeRight.Tests.ScriptWriting
{
	[TestClass]
	public class AspNetScriptWritingTests : ControllerWritingTestsBase
	{

		protected override string ControllerName => "SimpleController";

		/// <summary>
		/// Sets up a parse of this solution
		/// </summary>
		[TestInitialize]
		public void SetupParse()
		{
			InitializeDefaultBuilder();

			WorkspaceBuilder.DefaultProject
				.CreateClassBuilder(ControllerName)
					.WithControllerBaseClass(false)
					.AddMethod("Json", "FakeJsonResultLikeClass")
						.AddParameter("data", "object")
						.AddLineOfCode("return null;", 0)
						.Commit()

					.AddMethod("StringResult", "string")
						.AddScriptActionAttribute()
						.AddLineOfCode("return \"Hi\";", 0)
						.Commit()
					.AddMethod("SimpleParameter_Json", MvcConstants.JsonResult_AspNet)
						.AddScriptActionAttribute()
						.AddParameter("testParam", "TestClass")
						.AddLineOfCode("return Json(testParam);", 0)
						.Commit()
					.AddMethod("GenericPropReturn_Json", MvcConstants.JsonResult_AspNet)
						.AddScriptActionAttribute()
						.AddLineOfCode("TestGenericClass<TestClass> gen = new TestGenericClass<TestClass>();", 0)
						.AddLineOfCode("return Json(gen.GenericProp);", 0)
						.Commit()
					.Commit();
		}

		[TestMethod]
		public void DefaultOptions_Generated()
		{
			AssertControllerGeneratedText(
			#region ScriptText	
				@"
// File Autogenerated by TypeRight.  DO NOT EDIT
import * as DefaultResult from ""../../DefaultResult"";
import { TestAjax } from ""../../FolderM/FolderN/AjaxFunc"";


/**
 * 
 */
export function GenericPropReturn_Json(success?: (result: DefaultResult.TestClass) => void, fail?: (result: any) => void): void {
	TestAjax(`/Simple/GenericPropReturn_Json`, {}, success, fail);
}

/**
 * 
 * @param testParam 
 */
export function SimpleParameter_Json(testParam: DefaultResult.TestClass, success?: (result: DefaultResult.TestClass) => void, fail?: (result: any) => void): void {
	TestAjax(`/Simple/SimpleParameter_Json`, testParam, success, fail);
}

/**
 * 
 */
export function StringResult(success?: (result: string) => void, fail?: (result: any) => void): void {
	TestAjax(`/Simple/StringResult`, {}, success, fail);
}



"
			#endregion
				);
		}


		[TestMethod]
		public void AddlImportsIncluded()
		{
			GivenImportDefinition(new ImportDefinition()
			{
				Items = new List<string>() { "Item1", "Item2" },
				Path = @"C:\FolderA\FolderB\ItemListImport.ts"
			});

			GivenImportDefinition(new ImportDefinition()
			{
				Path = @"C:\FolderA\FolderB\AliasedImport.ts",
				UseAlias = true
			});

			AssertControllerGeneratedText(
			#region ScriptText	
				@"
// File Autogenerated by TypeRight.  DO NOT EDIT
import * as AliasedImport from ""../../AliasedImport"";
import * as DefaultResult from ""../../DefaultResult"";
import { TestAjax } from ""../../FolderM/FolderN/AjaxFunc"";
import { Item1, Item2 } from ""../../ItemListImport"";


/**
 * 
 */
export function GenericPropReturn_Json(success?: (result: DefaultResult.TestClass) => void, fail?: (result: any) => void): void {
	TestAjax(`/Simple/GenericPropReturn_Json`, {}, success, fail);
}

/**
 * 
 * @param testParam 
 */
export function SimpleParameter_Json(testParam: DefaultResult.TestClass, success?: (result: DefaultResult.TestClass) => void, fail?: (result: any) => void): void {
	TestAjax(`/Simple/SimpleParameter_Json`, testParam, success, fail);
}

/**
 * 
 */
export function StringResult(success?: (result: string) => void, fail?: (result: any) => void): void {
	TestAjax(`/Simple/StringResult`, {}, success, fail);
}



"
			#endregion
				);
		}

		[TestMethod]
		public void PromiseWithReturnType()
		{
			GivenActionParameters(new List<ActionParameter>()); // remove addl params
			GivenScriptReturnType("Promise<$returnType$>");

			AssertControllerGeneratedText(
			#region ScriptText	
				@"
// File Autogenerated by TypeRight.  DO NOT EDIT
import * as DefaultResult from ""../../DefaultResult"";
import { TestAjax } from ""../../FolderM/FolderN/AjaxFunc"";


/**
 * 
 */
export function GenericPropReturn_Json(): Promise<DefaultResult.TestClass> {
	return TestAjax(`/Simple/GenericPropReturn_Json`, {});
}

/**
 * 
 * @param testParam 
 */
export function SimpleParameter_Json(testParam: DefaultResult.TestClass): Promise<DefaultResult.TestClass> {
	return TestAjax(`/Simple/SimpleParameter_Json`, testParam);
}

/**
 * 
 */
export function StringResult(): Promise<string> {
	return TestAjax(`/Simple/StringResult`, {});
}



"
			#endregion
				);
		}

		[TestMethod]
		public void CusstomAdditionalParams()
		{
			GivenActionParameters(new List<ActionParameter>()
			{
				new ActionParameter()
				{
					Name = "randomString",
					Type = "string"
				},
				new ActionParameter()
				{
					Name = "abortSignal",
					Optional = true,
					Type = "AbortSignal"
				}
			});
			
			GivenScriptReturnType("$returnType$");

			AssertControllerGeneratedText(
			#region ScriptText	
				@"
// File Autogenerated by TypeRight.  DO NOT EDIT
import * as DefaultResult from ""../../DefaultResult"";
import { TestAjax } from ""../../FolderM/FolderN/AjaxFunc"";


/**
 * 
 */
export function GenericPropReturn_Json(randomString: string, abortSignal?: AbortSignal): DefaultResult.TestClass {
	return TestAjax(`/Simple/GenericPropReturn_Json`, {}, randomString, abortSignal);
}

/**
 * 
 * @param testParam 
 */
export function SimpleParameter_Json(testParam: DefaultResult.TestClass, randomString: string, abortSignal?: AbortSignal): DefaultResult.TestClass {
	return TestAjax(`/Simple/SimpleParameter_Json`, testParam, randomString, abortSignal);
}

/**
 * 
 */
export function StringResult(randomString: string, abortSignal?: AbortSignal): string {
	return TestAjax(`/Simple/StringResult`, {}, randomString, abortSignal);
}



"
			#endregion
				);
		}
	}
}
